3306
33060
admin
service MySQL80

root

--------------------------
-------- LESSON 1 --------
--------------------------

mysql -u root -h 192.168.0.10 -P 3306 

USE    \u выбор базы данных
SOURCE \. Выполнение sql-команды из файла
SYSTEM \! Выполнение команды операционной системы
STATUS \s Вывод информации о состоянии сервера
EXIT   \q выход
       \G вывод результата в вертикальном формате

SOURCE hello.sql -- выполнение файла hello.sql

Файл с учеткой для автоматического подключения
-----
my.cnf
[client]
user=admin
passord=admin

mysqldump mysql > mysql.sql -- экспорт базы данных mysql в файл mysql.sql
mysql mysql < mysql.sql -- импорт данных из mysql.sql в базу данных mysql

create database shop;
show databases;
show variables like 'datadir';
drop database shop;
create database if not exists shop;
use shop
show tables;
show tables from mysql; -- указали базу данных mysql
select mysql.User.User, mysql.User.Host from mysql.User; -- запрос с квалифицированными именами
mysql shop; -- подключение с одновременным указанием базы данных

create table users (k int);
create table if not exists users (k int);
describe users; -- просмотр структуры таблицы
describe user 'User'; -- оператору можно указать имя столбца
describe user 'm%'; -- можно указывать шаблоны для сталбцов '_', '%'

SELECT * FROM information_schema.SCHEMATA;

select * from information_schema.TABLES where table_schema = 'shop';


--------------------
---------ДЗ LESSON 1
--------------------

Задание 2
create database example;
create table users(id int, name text);
mysqldump example > example.sql
create database sample
mysql sample < exmaple.sql

Задание 3
mysqldump --where="1 limit 100" mysql help_keyword > help_keyword.sql


----Разбор домашки
-------------------

create table if not exists users (
    id SERIAL COMMENT 'Table primary key', -- BigInt, первичный ключ, автоинкремент
    name VARCHAR(255) COMMENT 'User name'
);


SHOW CREATE TABLE users

SOURCE example.sql

mysqldump --skip-opt --where="1 limit 100" mysql help_keyword > help_keyword.sql    // --skip-opt - сделает несколько insert-ов вместо одного




--------------------------
-------- LESSON 2 --------
--------------------------

Типы данных
TINYINT   1 byte
SMALLINT  2 byte
MEDIUMINT 3 byte
INT       4 byte
BIGINT    8 byte

Вещественные
FLOAT  4 byte 
DOUBLE 8 byte
DECIMAL -- более точный тип. обрабатывается дольше всех типов. Число хранится в виде строки. Тип без потери точности

CREATE TABLE tbl(id INT(8)) -- 8 - указывает сколько символов печатать в консоле. необязательный параметр
'       5' -- пример печати в консоле

CREATE TABLE tbl(id INT(8) ZEROFILL)
'00000005' -- пример печати в консоле

DECIMAL(7,4) -- под число отводится 7 байт, а под дробную часть 4 байта

CREATE TABLE tbl (price DECIMAL(7,4));


Строковые типы:
CHAR - фиксированная длина

VARCHAR - переменная длина строки, в скобках указвается максимальная длина строки. Максимальная длина 65536

BLOB
TINYTEXT   2 ^  8 = 256
TEXT       2 ^ 16 = 65536 
MEDIUMTEXT 2 ^ 24 = 16777216(16Mb)
LONGTEXT   2 ^ 32 = 4294967296(4Gb)

create table tbl (
    name char(10) default 'anonymous',
    description varchar(255)
);
insert into tbl values (default, 'New user');
insert into tbl values ('Игорь', 'New user');

ALT+X - выполнить скрипт в dbeaver



Тип NULL
    Все операции с данным типом приводят к типу NULL


create table tbl (id int unsigned);
alter table tbl change id id int unsigned not null;
truncate tbl;


Каледнарные типы даннх:                                                               
YEAR - хранит год                                                                   1 byte 0000
DATE - хранит дату с точностю до дня                                                3 byte 0000-00-00
TIME - для хранения времени в течение суток                                         3 byte 00:00:00
TIMESTAMP - также хранит дату и время. занимает в 2 раза меньше                     4 byte 0000-00-00 00:00:00
   места чем DATETIME, но может хранить даты в ограниченном интевале от 1970-2038гг   
DATETIME - хранит дату и время                                                      8 byte 0000-00-00 00:00:00


select '2018-10-01 0:00:00' - interval 1 day; -- вычли из даты 1 день
select '2018-10-01 0:00:00' + interval 1 week; -- прибавили 1 неделю к дате 
select '2018-10-01 0:00:00' + interval 1 year; -- прибавили 1 год к дате 

комбинированные интервалы
select '2018-10-01 0:00:00' + interval '1-1' year_month; -- прибавили 1 год и 1 месяц к дате 

Enum и Set типы данных
При создании столбца данного тип значения задаются строковым списком через запятую 'first', 'second', 'third', но значения в столбце хранятся в виде чисел.

alter table tbl add collect json;
insert into tbl values (1, '{"first":"Hello", "second":"World"}'); -- вставка json Объекта
select collect->>"$.first" from tbl; -- получение значения поля json Объекта



Типы индексов:
Обычные - может быть несколько
уникальные, первичные - может быть в таблице только один. в строках данного столбца могут храниться только уникальные данные. значения не могут принимать NULL
полнотекстовые - предназначен для столбцов типа text, позволяющий проводить полнотекстовый поиск. На практике же полнотекстовый поиск осуществляется субд ElasticSearch


Включение механизма auto_increment
insert into catalogs (name) values ('Processors');
insert into catalogs values (NULL, 'Motherboards');
insert into catalogs values (0, 'Video cards');
insert into catalogs values (default, 'Video cards');


Псевдотип SERIAL
SERIAL == BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE

Mysql поддерживает 2 тип индексов BTREE и хэштаблицу


CRUD ОПЕРАЦИИ
--------------
DELETE FROM catalogs;
TRUNCATE catalogs; -- очищает таблицу и обнуляет счетчики auto_increment



--------------------------
-------- LESSON 3 --------
--------------------------

'5' + '2' = 7
5 div 2 = 2 -- целочисленное деление
5 % 2 = 1 -- остаток от деления
5 mod 2 = 1 -- остаток от деления
true и false -- костанты. тип tinyint 1 и 0 соотвественно
<=> -- безопасное сравнение, позволяет сравнивать со значением NULL, nlow
not, ! -- отрицание
2 = NULL -- NULL
2 != NULL -- NULL
2 <=> NULL -- 0
NULL <=> NULL -- 1

create table tbl (
    x int,
    y int,
    summ int as (x + y) -- вычислется при обращении, не сохраняется на диске
);


create table tbl (
    x int,
    y int,
    summ int as (x + y) stored  -- сохраеяется на диске, более того, мы можем его индексировать
);

between 1 and 100
not between 10 and 70

select 2 in (0, null, 5, 'str') -- null
not in 

\% -- чтобы вывести %
\_ -- чтобы вывести _



RLIKE или REGEXP -- регулярные выражения

LIMIT 3, 4 -- 3 - позиция, начиная с которой необходимо вернуть результат, 4 - количество извлекаемых записей
LIMIT 4 OFFSET 3 -- тоже самоей

select distinct catalog_id from products order by catalog_id


----
---- МЕТОДЫ
----

NOW() -- текущее время и дата. за время запроса вычиляется только один раз, не зависимо от количества вызовов этого метода

DATE(date) -- отрезает время
DATE_FORMAT('2018-06-12 01:59:59', 'На дворе %Y год') -- на дворе 2018 год
DATE_FORMAT(birthday_at, '%d.%m.%Y') as birthday_at

UNIXSTAMP -- данный формат даты числовой, обрабатывается быстро, можно идексировать и занимает меньше места 4 байта, DATETIME - 8байт. Хранит даты от 1970 по 2038 год

UNIX_TIMESTAMP() -- преобразование в UNIXSTAMP
FROM_UNIXTIME() -- преобразование из UNIXSTAMP

SELECT UNIX_TIMESTAMP('2018-10-1O 10:09:23') AS TIMESTAMP, FROM_UNIXTIME(1539155363) AS DATETIME; -- 1539155363, 2018-10-1O 10:09:23

TO_DAYS() -- получение количесва дней 
FLOOR() -- избавление от дробной части

TIMESTAMPDIFF(YEAR, birthday_at, now()) -- более точный вариант

select * from users order by RAND() -- вывод строк в случайном порядке

VERSION() -- текущая версия MySQL сервера

LAST_INSERT_ID() -- последний id вычисленный автоинкриментом

DATABASE() -- возвращает текущую выбранную базу данных

USER() -- текущий пользователь


---------МАТЕМАТИЧЕСКИЕ ФУНКЦИИ

SQRT() -- квадратный корень числа


create table distances (
    id SERIAL PRIMARY KEY,
    x1 INT NOT NULL,
    x2 INT NOT NULL,
    y1 INT NOT NULL,
    y2 INT NOT NULL,
    distance DOUBLE AS (SQRT(POW(x1 - x2, 2) + POW(y1 -y2, 2)))
) COMMENT = 'Расстояние между двумя точками';

create table distances (
    id SERIAL PRIMARY KEY,
    a JSON NOT NULL,
    b JSON NOT NULL,
    distance DOUBLE AS (SQRT(POW(a->>'$.x' - b->>'$.x', 2)+POW(a->>'$.y' - b->>'$.y', 2)))
) COMMENT = 'Расстояние между двумя точками';


square DOUBLE AS (a * b * SIN(RADIANS(angle))/2.0)

alter table triangles change square square DOUBLE AS (ROUND(a * b * SIN(RADIANS(angle))/2.0))

ROUND() -- математическое округление
CEILING() -- округление в большую сторону 

------ СТРОКОВЫЕ ФУНКЦИИ
SUBSTRING(name, 1, 5) -- получение подстроки, 1 - позиция начала, 5 - количество извлекаемых символов
CONCAT() -- объединение строк

IF(TRUE, 'истина', 'ложь') -- функция условия

select 
    case 
        when color = 'red' then 'красный'
        when color = 'orange' then 'оранжевый'
        else 'фиолетовый'
    end


INET_ATON('62.145.69.10') -- представление IP адреса ввиде целого числа
INET_NTOA() -- решает обратную задачу

UUID() -- возвращает универсальный уникальный идетификатор


--------------------------
-------- LESSON 4 --------
--------------------------

GROUP_CONCAT(column name) -- показывает какие значения попали в группу. Может извлечь максимум 1000 элементов, но можно изменить с помощью параметра сервера GROUP_CONCAT_MAX_LEN 
GROUP_CONCAT(name SEPARATOR ' ') -- позволяет указать заделитель
GROUP_CONCAT(name ORDER BY name DESC SEPARATOR ' ') -- позволяет добавить сортировку значений

COUNT(column) -- исключаются NULL значения
COUNT(DISTINCT catalog_id) -- исключаются повторяющиеся значения

SELECT * FROM users HAVING birthday_at >= '1990-01-01'; -- можно использовать HAVING без GROUP BY. В этом случае каждая строка рассматривается как отдельная группа

ANY_VALUE() -- возвращает случайное значение группового поля

WITH ROLLUP -- для подведения итогов по сгруппированным данным.

CONCAT_WS('-', 2019,  10, 31); -- 2019-10-31


--------------------------
-------- LESSON 5 --------
--------------------------
Типы многотабличных запросов
- объединения (union)
- вложенные запросы 
- соединение (join)

Опрерации с множествами
- union (поддержано MYSQL)
- except
- intersect